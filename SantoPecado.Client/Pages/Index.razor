@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager

<div class="main">
    <ul class="burger-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigureBurgerDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="burger-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Burgers.Any())
    {
        <div class="order-contents">
            <h2>Tu pedido</h2>

            @foreach (var configuredBurger in Order.Burgers)
            {
                <ConfiguredBurgerItem Burger="configuredBurger" OnRemoved="@(() => OrderState.RemoveConfiguredBurger(configuredBurger))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Elige una burger<br> y comenzamos tu pedido.</div>
    }

    <div class="order-total @(Order.Burgers.Any() ? "" : "hidden")">
        Total: 
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Burgers.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Pedir >
        </a>
    </div>
</div>


@if (OrderState.ShowingConfigureDialog)
{
    <ConfigureBurgerDialog
        Burger="OrderState.ConfiguringBurger"
        OnCancel="OrderState.CancelConfigureBurgerDialog"
        OnConfirm="OrderState.ConfirmConfigureBurgerDialog" />
}

@code {
    List<BurgerSpecial> specials;
    Order Order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<BurgerSpecial>>("specials");
    }

}

